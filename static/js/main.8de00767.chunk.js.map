{"version":3,"sources":["logo.svg","contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Display","_ref","contact","ondelete","react_default","a","createElement","map","value","index","className","concat","name","phone","type","onClick","console","log","contacts","initialstate","save","filteredcontact","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onPhoneChange","event","setState","target","onSubmitData","push","state","onNameChange","onDelete","splice","_this2","id","Style","color","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCkBzBC,eAhBC,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,QAAQC,EAAYF,EAAZE,SAEzB,OACCC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oCACEJ,EAAQK,IAAI,SAACC,EAAMC,GACnB,OACCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UAAf,GAAAC,OACGF,EAAM,EADT,KAAAE,OACcH,EAAMI,KADpB,aAAAD,OACoCH,EAAMK,MAD1C,MACoDT,EAAAC,EAAAC,cAAA,SAAQI,UAAU,QAAOI,KAAK,SAASN,MAAM,SAASO,QAAS,WAAKC,QAAQC,IAAI,UAAUd,EAASM,YCNxJS,EAAS,GACPC,EAAa,CACjBP,KAAK,GACLC,MAAM,GACNO,KAAK,GACLC,gBAAgBH,GAoDHI,cA/Cf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAIDI,cAAc,SAACC,GACZR,EAAKS,SAAS,CAACnB,MAAMkB,EAAME,OAAOzB,SANzBe,EASXW,aAAa,WACbX,EAAKS,SAAS,CAACZ,KAAK,IACpBF,EAASiB,KAAK,CAACvB,KAAKW,EAAKa,MAAMxB,KAAKC,MAAMU,EAAKa,MAAMvB,QACtDU,EAAKS,SAAS,CAACX,gBAAgBH,KAZnBK,EAgBXc,aAAa,SAACN,GACZR,EAAKS,SAAS,CAACpB,KAAKmB,EAAME,OAAOzB,SAjBxBe,EAoBXe,SAAS,SAAC7B,GACRO,QAAQC,IAAI,SACZC,EAASqB,OAAO9B,EAAM,GACtBc,EAAKS,SAAS,CAACX,gBAAgBH,KArBjCK,EAAKa,MAAMjB,EAFAI,wEA0BF,IAAAiB,EAAAd,KACP,OACEtB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACfN,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASJ,UAAU,QAAQF,MAAM,cAAcO,QAAS,WAAMyB,EAAKR,SAAS,CAACZ,KAAK,OAE1E,GAAjBM,KAAKU,MAAMhB,KACdhB,EAAAC,EAAAC,cAACY,EAAD,CAAShB,QAASwB,KAAKU,MAAMf,gBAAiBlB,SAAUuB,KAAKY,WAC7DlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOmC,GAAG,KAAKC,MAAQ,CAACC,MAAM,SAAUC,SAAUlB,KAAKW,eACvDjC,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAOmC,GAAG,KAAM3B,KAAK,QAAQ8B,SAAUlB,KAAKI,gBAC5C1B,EAAAC,EAAAC,cAAA,iBAAAK,OAAYe,KAAKU,MAAMxB,OACvBR,EAAAC,EAAAC,cAAA,kBAAAK,OAAae,KAAKU,MAAMvB,QACxBT,EAAAC,EAAAC,cAAA,SAAOI,UAAU,QAAQI,KAAK,SAASN,MAAM,OAAOO,QAASW,KAAKQ,wBAzCtDW,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8de00767.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Display = ({contact,ondelete})=>{\r\n//\tconst{}=props;\r\n\treturn(\r\n\t\t<div>\r\n\t\t<p>Name              phone</p>\r\n\t\t{ contact.map((value,index) =>{\r\n\t\t  return(\r\n\t\t  \t<div className=\"sanjay\">\r\n\t\t  {`${index+1}.${value.name}         ${value.phone}  `}<input  className=\"input\"type=\"button\" value=\"Delete\" onClick={()=>{console.log(\"sanjay\");ondelete(index)}}/>\r\n\t\t  </div>\r\n\t\t  );\r\n\t\t})\r\n\t     }\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Display;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Display from './contacts';\nlet contacts=[];\nconst initialstate={\n  name:'',\n  phone:'',\n  save:'',\n  filteredcontact:contacts\n\n}\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state=initialstate;\n}\n\n onPhoneChange=(event)=>{\n    this.setState({phone:event.target.value})\n    //console.log(event.target.value);\n  }\n  onSubmitData=()=>{\n  this.setState({save:1});\n  contacts.push({name:this.state.name,phone:this.state.phone})\n this.setState({filteredcontact:contacts});\n //console.log(this.state);\n //console.log(contacts);\n}\n  onNameChange=(event)=>{\n    this.setState({name:event.target.value})\n    //console.log(event.target.value);\n  }\n  onDelete=(index)=>{\n    console.log(\"hello\");\n    contacts.splice(index,1);\n    this.setState({filteredcontact:contacts});\n\n  }\n  render() {\n    return (\n      <div className=\"him\">\n      <input type=\"button\" className=\"input\" value=\"Add contact\" onClick={()=>{ this.setState({save:0})}} />\n      {\n        (this.state.save==1)?\n      <Display contact={this.state.filteredcontact} ondelete={this.onDelete}/>:\n      <div>\n      <p>Name:</p>\n      <input id=\"02\" Style={ {color:'green'}} onChange={this.onNameChange}/>\n      <p>phone:</p>\n      <input id=\"03\"  type=\"value\" onChange={this.onPhoneChange}/>\n      <p>{`Name:${this.state.name}`}</p>\n      <p>{`Phone:${this.state.phone}`}</p> \n      <input className=\"input\" type=\"submit\" value=\"Save\" onClick={this.onSubmitData} />\n      </div>\n     }\n     </div>\n    ); \n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}